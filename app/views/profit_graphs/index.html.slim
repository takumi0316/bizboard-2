- current_date = params[:current].present?? Date.parse(params[:current]) : Date.today
- targets = Target.where(target_year: current_date.year, target_month: current_date.month)

.l-dashboard__month
  = link_to '<< 前月', profit_graphs_path(current: params[:current] ? (Date.parse(params[:current]) - 1.month).to_s(:system) : Date.today.to_s(:system)), class: 'l-dashboard__monthPrev'
  span = "#{current_date.year}年#{current_date.month}月"
  = link_to '次月 >>', profit_graphs_path(current: params[:current] ? (Date.parse(params[:current]) + 1.month).to_s(:system) : Date.today.to_s(:system)), class: 'l-dashboard__monthNext'

  h2.l-dashboard__heading 全体
  .l-dashboard__graphs

    / 形状範囲
    - range = current_date.beginning_of_month.beginning_of_day..current_date.end_of_month.end_of_day

    / 見込み
    / range内の納期に紐づく案件IDを取得
    - quote_ids = Quote.deliverd_in(range).pluck(:id)
    / 活動履歴と案件を組み合わせて受注予定日と合う物を取得
    - activity = Activity.where(quote_id: quote_ids).joins(:quote)
    / 活動履歴から同じquote_idを持つのから最新の作成日を取得
    - hash = activity.group(:quote_id).having('count(*) >= 2').maximum(:created_at)
    /取得した作成日以前の活動履歴のidを取得
    - activity_ids = activity.where(quote_id: hash.keys).where.not(created_at: hash.values).pluck(:id)

    - if activity_ids.blank?
      - activity_ids = activity.ids
      - activities = Activity.where(id: activity_ids).joins(:quote).merge(Quote.deliverd_in(range))
    - else
      - activities = Activity.where.not(id: activity_ids).joins(:quote).merge(Quote.deliverd_in(range))

    / 確度ABC
    - accurary = activities.where("(accurary = ?) OR (accurary = ?) OR (accurary = ?) OR (activities.status != ?)", 'a', 'b', 'c', 'order').pluck(:price).sum
    - profit_accurary = activities.where("(accurary = ?) OR (accurary = ?) OR (accurary = ?) OR (activities.status != ?)", 'a', 'b', 'c', 'order').pluck(:profit_price).sum

    / 案件が作業完了以降のステータスのもの 40,50,60
    - status_order = activities.where("(quotes.status = ?) OR (quotes.status = ?) OR (quotes.status = ?)", 'end_work', 'invoicing', 'complete').pluck(:price).sum
    - profit_status_order = activities.where("(quotes.status = ?) OR (quotes.status = ?) OR (quotes.status = ?)", 'end_work', 'invoicing', 'complete').pluck(:profit_price).sum


    / 目標売上
    - orders = targets.map(&:sales).inject(:+)
    - profits = targets.map(&:profit).inject(:+)

    .l-dashboard__graph
    = react_component('ProfitGraph',{ label: '受注額', plans: accurary, orders: status_order, targets: orders,})

    .l-dashboard__graph
    = react_component('ProfitGraph',{ label: '利益額', plans: profit_accurary, orders: profit_status_order, targets: profits,})

  h2.l-dashboard__heading 受注額
  .l-dashboard__graphs
    .l-dashboard__graph
    - range = current_date.beginning_of_month.beginning_of_day..current_date.end_of_month.end_of_day
    - targets.each do |r|
      / 形状範囲
      / 見込み
      / range内の納期に紐づく案件IDを取得
      - quote_ids = Quote.where(division_id: r.division_id).deliverd_in(range).pluck(:id)
      / 活動履歴と案件を組み合わせて案件IDと合う物を取得
      - activity = Activity.where(quote_id: quote_ids).joins(:quote)
      / 活動履歴から同じquote_idを持つのから最新の作成日を取得
      - hash = activity.group(:quote_id).having('count(*) >= 2').maximum(:created_at)
      /取得した作成日以前の活動履歴のidを取得
      - activity_ids = activity.where(quote_id: hash.keys).where.not(created_at: hash.values).pluck(:id)

      - if activity_ids.blank?
        - activity_ids = activity.ids
        - activities = activity.where(id: activity_ids).joins(:quote).merge(Quote.deliverd_in(range))
      - else
        - activities = activity.where.not(id: activity_ids).joins(:quote).merge(Quote.deliverd_in(range))

      / 確度ABC
      - accurary = activities.where("(accurary = ?) OR (accurary = ?) OR (accurary = ?) OR (activities.status != ?) (quotes.status = ?) OR (quotes.status = ?) OR (quotes.status = ?)" , 'a', 'b', 'c', 'order', 'end_work', 'invoicing', 'complete').pluck(:price).sum

      / ステータス受注
      - status_order = Quote.invoicing.where(division_id: r.division.id).joins(:invoice).merge(Invoice.date_in(range)).pluck(:price).sum
      /- status_order = activities.where("(quotes.status = ?) OR (quotes.status = ?) OR (quotes.status = ?)", 'end_work', 'invoicing', 'complete').pluck(:price).sum

      / 目標売上
      - orders = r.sales

      = react_component('ProfitGraph',{ label: r.division.name, plans: accurary, orders: status_order, targets: orders,})

  h2.l-dashboard__heading 利益額
  .l-dashboard__graphs
    .l-dashboard__graph
    / 形状範囲
    - range = current_date.beginning_of_month.beginning_of_day..current_date.end_of_month.end_of_day

    - targets.each do |r|

      / 見込み
      / range内の納期に紐づく案件IDを取得
      - quote_ids = Quote.where(division_id: r.division_id).deliverd_in(range).pluck(:id)
      / 活動履歴と案件を組み合わせて受注予定日と合う物を取得
      - activity = Activity.where(quote_id: quote_ids).joins(:quote)
      / 活動履歴から同じquote_idを持つのから最新の作成日を取得
      - hash = activity.group(:quote_id).having('count(*) >= 2').maximum(:created_at)
      /取得した作成日以前の活動履歴のidを取得
      - activity_ids = activity.where(quote_id: hash.keys).where.not(created_at: hash.values).pluck(:id)

      - if activity_ids.blank?
        - activity_ids = activity.ids
        - activities = activity.where(id: activity_ids).joins(:quote).merge(Quote.deliverd_in(range))
      - else
        - activities = activity.where.not(id: activity_ids).joins(:quote).merge(Quote.deliverd_in(range))

      / 確度ABC
      - accurary = activities.where("(accurary = ?) OR (accurary = ?) OR (accurary = ?) OR (activities.status != ?)", 'a', 'b', 'c', 'order').pluck(:profit_price).sum

      / ステータス受注
      - status_order = Quote.invoicing.where(division_id: r.division.id).joins(:invoice).merge(Invoice.date_in(range)).pluck(:price).sum
      /- status_order = activities.where("(quotes.status = ?) OR (quotes.status = ?) OR (quotes.status = ?)", 'end_work', 'invoicing', 'complete').pluck(:price).sum

      / 目標売上
      - profits = r.profit

      = react_component('ProfitGraph',{ label: r.division.name, plans: accurary, orders: status_order, targets: profits,})
